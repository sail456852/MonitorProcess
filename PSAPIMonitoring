#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <psapi.h>
#include <iostream>

// To ensure correct resolution of symbols, add Psapi.lib to TARGETLIBS
// and compile with -DPSAPI_VERSION=1

void PrintProcessNameAndID (DWORD processID)
{
	TCHAR szProcessName[MAX_PATH] = TEXT ("<unknown>");

	// Get a handle to the process.

	HANDLE hProcess = OpenProcess (PROCESS_QUERY_INFORMATION |
		PROCESS_VM_READ,
		FALSE, processID);

	// Get the process name.

	if (NULL != hProcess)
	{
		HMODULE hMod;
		DWORD cbNeeded;

		if (EnumProcessModules (hProcess, &hMod, sizeof (hMod),
			&cbNeeded))
		{
			GetModuleBaseName (hProcess, hMod, szProcessName,
				sizeof (szProcessName) / sizeof (TCHAR));
		}
	}

	// Print the process name and identifier.
	TCHAR target[MAX_PATH] = TEXT ("notepad.exe");

	if (!_tcscmp (szProcessName, target))
		MessageBox (0, _T ("hello"), _T ("bitch"), MB_OK);

	// Release the handle to the process.

	CloseHandle (hProcess);
}


int main (void)
{


	// Print the name and process identifier for each process.
	while (1)
	{
		// Get the list of process identifiers.

		DWORD aProcesses[1024], cbNeeded, cProcesses;
		unsigned int i;
		EnumProcesses (aProcesses, sizeof (aProcesses), &cbNeeded);
		cProcesses = cbNeeded / sizeof (DWORD);

		for (i = 0; i < cProcesses; i++)
		{
			if (aProcesses[i] != 0)
			{
				PrintProcessNameAndID (aProcesses[i]);
			}
		}
	}
	return 0;
}
//tested ,works fine on Windows 10 64 bits platform . 
//remember this API only displays single platform processes ,64 bits only or 32 bits only ,
//remember to check the build target status 

